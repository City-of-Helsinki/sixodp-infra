AWSTemplateFormatVersion: "2010-09-09"
Description: sixodp application infrastructure

Parameters:
  EnvironmentName:
    Type: String
    Default: infratest
    AllowedValues:
      - infratest
      - helsinki-qa
      - hri
  InstanceType:
    Description: EC2 instance type for the application servers
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: "Must be one of the following EC2 instance types: t2.micro, t2.small, t2.medium, t2.large"
  DatabaseSecurityGroup:
    Description: Security group of the RDS database
    Type: AWS::EC2::SecurityGroup::Id
    MinLength: 1
  EFSFileSystem:
    Description: Name of the EFS filesystem
    Type: String
    MinLength: 1
  EFSSecurityGroup:
    Description: Security group of the EFS filesystem
    Type: AWS::EC2::SecurityGroup::Id
    MinLength: 1
  WhitelistedIpAddress:
    Type: String
    Default: 193.64.225.83/32
    MinLength: 1
  GitBranch:
    Description: Git branch to checkout
    Type: String
    Default: master
    MinLength: 1
  HostedZoneId:
    Description: Zone ID for the DNS record
    Type: AWS::Route53::HostedZone::Id
    Default: ZATUHVQ7UQKB7
    MinLength: 1

Conditions:
    IsProduction:
        !Equals [!Ref EnvironmentName, hri]

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-4d46d534 # Ubuntu Server 16.04 LTS (HVM), SSD Volume Type
      KeyName: sixodp-helsinki-omni
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 60
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub sixodp-${EnvironmentName}
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash

          export HOME=/root
          export DEBIAN_FRONTEND=noninteractive

          apt-get update
          apt-get -y dist-upgrade
          apt-get -y install libssl-dev libffi-dev python-dev python-pip git nfs-common
          pip install pip setuptools --upgrade
          pip install awscli ansible==2.3.2 markupsafe docker-py==1.9.0

          echo '${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' >>/etc/fstab
          echo '${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/var_lib_acme /var/lib/acme nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' >>/etc/fstab
          echo '${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/opt_datacatalog_data_ckan /opt/datacatalog/data/ckan nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' >>/etc/fstab
          mount /mnt
          mkdir -p /var/lib/acme /opt/datacatalog/data/ckan /mnt/var_lib_acme /mnt/opt_datacatalog_data_ckan
          mount /var/lib/acme
          mount /opt/datacatalog/data/ckan
          install -d -o www-data -g www-data /mnt/wp-uploads

          cd /root
          git clone https://github.com/City-of-Helsinki/sixodp-infra.git
          git clone -b ${GitBranch} https://github.com/City-of-Helsinki/sixodp.git

          cd /root/sixodp-infra/bootstrap
          ansible-playbook -i localhost, deploy.yml

          cd /root/sixodp
          git submodule update --init --recursive

          aws s3 cp s3://sixodp-helsinki-secrets/${EnvironmentName}/secrets.yml /root/sixodp-secrets/${EnvironmentName}/secrets.yml
          aws s3 cp s3://sixodp-helsinki-secrets/${EnvironmentName}/google_analytics_credentials.json /root/sixodp-secrets/${EnvironmentName}/google_analytics_credentials.json
          chmod -R go-rwx /root/sixodp-secrets/*

          cd /root/sixodp/ansible
          ansible-playbook -i inventories/${EnvironmentName} deploy-transitional.yml

          echo "Bootstrap done."

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      SecurityGroupIngress: 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddress
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 8983
          ToPort: 8983
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddress

  DatabaseIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      GroupId: !Ref DatabaseSecurityGroup
      SourceSecurityGroupName: !Ref InstanceSecurityGroup

  MySQLDatabaseIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref DatabaseSecurityGroup
      SourceSecurityGroupName: !Ref InstanceSecurityGroup

  EFSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      GroupId: !Ref EFSSecurityGroup
      SourceSecurityGroupName: !Ref InstanceSecurityGroup

  ElasticAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance

  DomainName:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: hri.fi
      Type: A
      TTL: 300
      HostedZoneId: !Ref HostedZoneId
      ResourceRecords: [ { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] } ]
    Condition: IsProduction

  WWWDomainName:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: www.hri.fi
      Type: A
      TTL: 300
      HostedZoneId: !Ref HostedZoneId
      ResourceRecords: [ { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] } ]
    Condition: IsProduction

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::sixodp-helsinki-secrets/${EnvironmentName}/*"
              - Effect: Allow
                Action: "*"
                Resource:
                  - !Sub "arn:aws:s3:::sixodp-${EnvironmentName}-datasets"
                  - !Sub "arn:aws:s3:::sixodp-${EnvironmentName}-datasets/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

Outputs:
  InstanceId:
    Value: !Ref EC2Instance
  PublicDNS:
    Value: !GetAtt EC2Instance.PublicDnsName
  SiteURL:
    Value: !Sub https://${EnvironmentName}.dataportaali.com
  AZ:
    Value: !GetAtt EC2Instance.AvailabilityZone
  PublicIP:
    Value: !GetAtt EC2Instance.PublicIp
